package com.dlms.controller.pds;

import java.io.File;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.dlms.dto.DocumentVO;
import com.dlms.dto.Document_dataVO;
import com.dlms.dto.MemberVO;
import com.dlms.dto.MessengerVO;
import com.dlms.request.ProfessorShareRequest;
import com.dlms.request.SearchCriteria;
import com.dlms.service.board.DocumentBoardService;
import com.dlms.service.member.MemberService;
import com.dlms.service.message.MessengerService;
import com.dlms.utils.DownloadView;

@Controller
@RequestMapping("/pds/document/*")
public class DocumentController {

	@Autowired
	private DocumentBoardService documentBoardService;
	public void setDocumentBoardService(DocumentBoardService documentBoardService) {
		this.documentBoardService = documentBoardService;
	}
	@Autowired
	private MemberService memberService;
	public void setMemberService(MemberService memberService) {
		this.memberService = memberService;
	}
	
	@Autowired
	private MessengerService messengerService;
	public void setMessengerService(MessengerService messengerService) {
		this.messengerService = messengerService;
	}
	
	@Autowired
	private JavaMailSender mailSender;

	//문서자료 첨부파일 저장경로
	@Resource(name = "document_attachPath")
	private String document_attachPath;
	
	//쪽지 첨부파일 저장경로
	@Resource(name = "messageAttachPath")
	private String messageAttachPath;
	
	@RequestMapping("list")
	public String qnaList(SearchCriteria cri, Model model) throws Exception {
		String url = "pds/document/documentList.page";
		Map<String, Object> dataMap = documentBoardService.getDocumentList(cri);
		model.addAllAttributes(dataMap);
		
		return url;
	}

	@RequestMapping("registForm")
	public ModelAndView registForm(ModelAndView model) throws Exception {
		String url = "pds/document/documentRegist.page";	
	
		model.setViewName(url);
		return model;
	}
	
	@RequestMapping("modifyForm")
	public ModelAndView modifyForm(DocumentVO document, SearchCriteria cri, ModelAndView model) throws Exception {
		String url = "pds/document/documentModify.page";	
		document.setDocument_content(documentBoardService.getDocumenDetail(document.getDocument_no()).getDocument_content());
		model.addObject("document",document);
		model.addObject("pageMaker",cri);
		model.setViewName(url);
		return model;
	}
	
	@RequestMapping("modify")
	public ModelAndView modify(SearchCriteria cri, DocumentVO document, MultipartFile documentFile,
								HttpServletResponse response, ModelAndView model ) throws Exception {
		
		String url = "pds/document/documentDetail.page";
		try {
		if(!documentFile.getOriginalFilename().equals("") ) {
		Document_dataVO documentData = new Document_dataVO();
		String uploadPath = document_attachPath + File.separator;
		documentData.setDocument_data_path(uploadPath);
		String originalName = documentFile.getOriginalFilename();
		String type = originalName.substring(originalName.lastIndexOf(".")+1);
		documentData.setDocument_data_type(type);
		// 중복명 제거
		String fileName = UUID.randomUUID().toString().replace("-", "") + "$$" + documentFile.getOriginalFilename();
		documentData.setDocument_data_filename(fileName);
		document.setDocument_dataVO(documentData);
		System.out.println(document.getDocument_dataVO());
		/* 파일 경로확인 및 생성 */
		File file = new File(uploadPath, fileName);
		
		
		if (!file.exists()) {
			file.mkdirs();
		}
		/* 파일저장 */
		
		documentFile.transferTo(file);
		if(document.getDocument_content().length() < 0) {
			document.setDocument_content("");
		}
		documentBoardService.modifyDocument(document);	
		}else {
			
		if(document.getDocument_content().length() < 0) {
			document.setDocument_content("");
		}
		documentBoardService.modifyDocument(document);		
		}
		document = documentBoardService.getDocumenDetail(document.getDocument_no());
		model.addObject("pageMaker",cri);
		model.addObject("document",document);
		model.setViewName(url);
		}catch (NullPointerException e) {
			document = documentBoardService.getDocumenDetail(document.getDocument_no());
			model.addObject("pageMaker",cri);
			model.addObject("document",document);
			model.setViewName(url);
		}
		return model;
	
	}
	@RequestMapping("regist")
	public void regist(DocumentVO document, MultipartFile documentFile,HttpServletResponse response ) throws Exception {
		Document_dataVO documentData = new Document_dataVO();
		String uploadPath = document_attachPath + File.separator;
		documentData.setDocument_data_path(uploadPath);
		String originalName = documentFile.getOriginalFilename();
		String type = originalName.substring(originalName.lastIndexOf(".")+1);
		documentData.setDocument_data_type(type);
		// 중복명 제거
		String fileName = UUID.randomUUID().toString().replace("-", "") + "$$" + documentFile.getOriginalFilename();
		documentData.setDocument_data_filename(fileName);
		document.setDocument_dataVO(documentData);
		/* 파일 경로확인 및 생성 */
		File file = new File(uploadPath, fileName);
		
		
		if (!file.exists()) {
			file.mkdirs();
		}
		/* 파일저장 */
		
		if(document.getDocument_content().length() < 0) {
			document.setDocument_content("");
		}
		documentFile.transferTo(file);
		documentBoardService.writeDocument(document);
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		out.println("<script>");
		out.print("alert('등록을 완료했습니다.');");
		out.println("location.href='list';");
		out.println("</script>");
		
	}

	@RequestMapping("detail")
	public ModelAndView detail (int document_no, SearchCriteria cri, ModelAndView mnv) throws Exception{
		
		String url = "pds/document/documentDetail.page";
		DocumentVO document = documentBoardService.getDocumenDetail(document_no);
		
		mnv.addObject("document",document);
		mnv.addObject("pageMaker",cri);
		mnv.setViewName(url);
		return mnv;
		
	}
	/**
	 * 
	 *
	 * @기능설명		:	공유버튼에서 이메일을 클릭시 이메일쓰기 화면을 보여주는 기능
	 * @작성자		:	강현철
	 * @작성날짜		:	2020. 6. 28.
	 * @마지막수정자	:	강현철
	 * @마지막수정일	:	2020. 6. 28.오전 8:01:31
	 * @param 		:	ModeldAndView mnv
	 * @param 		:	documentNum(문서번호)
	 * @return		:	mnv(화면 결정 주소 및 화면에 필요한 해당 문서의 인자들)
	 */
	@RequestMapping("/sendMailForm")
	public ModelAndView sendMailForm (ModelAndView mnv, String documentNum) {
		String url="pds/document/sendMailForm";
		
		int docuemnt_no = Integer.parseInt(documentNum);
		try {
			DocumentVO duc=documentBoardService.getDocumenDetail(docuemnt_no);
			List<MemberVO> professorList= memberService.getProfessorList();
			mnv.addObject("professorList",professorList);
			mnv.addObject("documentInfo",duc);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		mnv.setViewName(url);
		return mnv;
	}
	
	/**
	 * 
	 *
	 * @기능설명		:	문서자료실에서 특정 교수들 또는 교수에게 선택한 문서를 이메일로 보내는 기능
	 * @작성자		:	강현철
	 * @작성날짜		:	2020. 6. 28.
	 * @마지막수정자	:	강현철
	 * @마지막수정일	:	2020. 6. 28.오전 7:55:12
	 * @param 		:	ModelAndView mnv
	 * @param 		:	emailReq(제목,내용,교수아이디,교수이메일주소)
	 * @param 		:	documentNum(문서번호)
	 * @return		:	mnv(화면 결정 주소)
	 */
	@RequestMapping("/sendEmailShare")
	public ModelAndView sendMail(ModelAndView mnv, ProfessorShareRequest emailReq, int documentNum ) {
		String url="pds/document/sendMailSuccess.page";
		DocumentVO doc = null;
		try {
			doc = documentBoardService.getDocumenDetail(documentNum);
		System.out.println("emailReq.getMember().length : "+emailReq.getMember().length);
		MimeMessage message = mailSender.createMimeMessage();
		MimeMessageHelper messageHelper = new MimeMessageHelper(message,true,"UTF-8");
		FileSystemResource file = new FileSystemResource(new File(document_attachPath+File.separator+doc.getDocument_dataVO().getDocument_data_filename()));
		messageHelper.addAttachment(doc.getOriginalName(), file);
		for(int i=0; i<emailReq.getMember().length; i++) {
			String emailAddr= emailReq.getMember()[i].getMember_email();
			System.out.println("emailAddr : " + emailAddr);
			messageHelper.setFrom("kkokkok8989@naver.com");
			messageHelper.setTo(emailAddr);
			messageHelper.setSubject("[공유] ["+ emailReq.getSendTitle()+"] 문서파일");
			messageHelper.setText(emailReq.getSendContent(),true);
			mailSender.send(message);
		}
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (MessagingException e) {
			e.printStackTrace();
		}
		
		mnv.setViewName(url);
		return mnv;
	}
	
	
	@RequestMapping("/sendMessageForm")
	public ModelAndView sendMessageForm(ModelAndView mnv, int documentNum ) {
	String url="pds/document/sendMessageForm";
		
		try {
			DocumentVO duc=documentBoardService.getDocumenDetail(documentNum);
			List<MemberVO> professorList= memberService.getProfessorList();
			mnv.addObject("professorList",professorList);
			mnv.addObject("documentInfo",duc);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping("/sendMessageShare")
	public ModelAndView sendMessageShare(ModelAndView mnv, ProfessorShareRequest shareReq ,int documentNum) {
		String url="pds/document/sendMessageShareSuccess.page";
		DocumentVO doc = new DocumentVO();
		
		try {
			doc=documentBoardService.getDocumenDetail(documentNum);
			
			int shareCnt=shareReq.getMember().length;
			for(int i =0; i<shareCnt; i++) {
				MessengerVO meg = new MessengerVO();
				meg.setMessage_filePath(messageAttachPath + File.separator);
				meg.setMessage_fileName(doc.getDocument_dataVO().getDocument_data_filename());
				meg.setMessenger_title(shareReq.getSendTitle());
				meg.setMessenger_content(shareReq.getSendContent());
				meg.setMessenger_writer(doc.getDocument_writer());
				meg.setMessenger_receiver(shareReq.getMember()[i].getMember_id());
				messengerService.sendMessage(meg);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping("remove")
	@ResponseBody
	public void delete(@RequestBody int dno) throws Exception {
		

		documentBoardService.removeDocument(dno);
		
		
	}
	
	@RequestMapping("attachDelete")
	@ResponseBody
	public ResponseEntity<String> attachDelete(@RequestBody int dno) throws Exception {
		
		ResponseEntity<String > entity = new ResponseEntity<>(HttpStatus.OK);
		documentBoardService.removeDocumentData(dno);
		
		return entity;
	}
	
	
	@RequestMapping(value="/fileDownload")
	public void downLoad(String fileName, String filePath , String downloadName, 
					    HttpServletRequest req, HttpServletResponse res, ModelAndView mnv)throws Throwable {

		try {
			DownloadView fileDown = new DownloadView(); //파일다운로드 객체생성
			fileDown.fileDown(req, res, filePath , fileName, downloadName, mnv); //파일다운로드 
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}









