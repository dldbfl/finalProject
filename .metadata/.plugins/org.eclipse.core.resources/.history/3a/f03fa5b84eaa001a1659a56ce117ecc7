<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member-mapper">

	<!--
		기능구분	: 조회
		기능설명	: 수강생과 교수의 정보 필수 정보 가져오기
		파라미터	: -
		리턴타입	: MemberVO
	-->
	<select id="selectMemberList" resultType="member">
		select *
		from member
	</select>
	<!--
		기능구분	: 조회
		기능설명	: 특정 회원의 필수 정보를 가져오기
		파라미터	: id
		리턴타입	: MemberVO
	-->
	<select id= "selectMemberById" resultType="member" parameterType="str">
		select *
		from member
		where member_id=#{member_id}
	</select>
	<!--
		기능구분	: 등록
		기능설명	: 회원가입 할 떄 사용 하는 등록문(공통입력사항)		
		파라미터	: MemberVO
		리턴타입	: -
	-->
	<update id="insertMember" parameterType="member"> 
		insert into member
		(member_id, member_pwd, member_name, member_post, member_address1, member_address2,
		member_email, member_phone, member_gender, member_birth, member_authority,
		member_status,	member_pwdcheck, member_picture)
		values(#{member_id}, #{member_pwd}, #{member_name}, #{member_post},#{member_address1}, 			   #{member_address2}, #{member_email}, #{member_phone}, #{member_gender},
			   #{member_birth}, #{member_authority}, #{member_status}, #{member_pwdcheck},
			   #{member_picture})
	</update>
	<!--
		기능구분	: 등록
		기능설명	: 회원가입 할 떄 사용 하는 등록문(수강생 필수 입력사항)		
		파라미터	: StudentVO
		리턴타입	: -
	-->
	<update id="insertStudent" parameterType="student">
		insert into student
		(student_id, student_hope_business, student_experience, student_business_purpose
		 student_remark)
		 values(#{student_id}, #{student_hope_business}, #{student_experience},
		 	    #{student_business_purpose}, #{student_remark})
	</update>
	<!--
		기능구분	: 등록
		기능설명	: 회원가입 할 떄 사용 하는 등록문(수강생 선택 입력사항-자격증입력)		
		파라미터	: Student_certificateVO
		리턴타입	: -
	-->
	<update id="insertStudentCertificate" parameterType="student_certifcicate">
		insert into student_certificate
		(student_certificate_no, student_id, student_certificate_kinds,	student_certificate_rank,
		student_certificate_date, student_certificate_agency)
		values(#{student_certificate_no},#{student_certificate_kinds},
			   #{student_certificate_rank}, #{student_certificate_date},
			   #{student_certificate_agency})
	</update>
	
	<!--
		기능구분	: 등록
		기능설명	: 회원가입 할 떄 사용 하는 등록문(교수의 필수 입력사항)
		파라미터	: ProfessorVO
		리턴타입	: -
	-->
	<update id="insertProfessor" parameterType="com.dlms.dto.ProfessorVO">
		insert into professor
		(professor_id, professor_hope_subject, professor_subject, professor_remark)
		values(#{professor_id}, #{professor_hope_subject}, #{professor_subject},
			  #{professor_remark})
	</update>
	<!--
		기능구분	: 등록
		기능설명	: 회원가입 할 떄 사용 하는 등록문(교수의 선택사항-경력)
		파라미터	: Professor_careerVO
		리턴타입	: -
	-->
	<update id="insertProfessorCareer" parameterType="com.dlms.dto.Professor_careerVO">
		insert into professor_career
		(professor_carrer_no, professor_id, professor_career_company_name,
		professor_career_mainjob, professor_career_position, professor_career_date,
		professor_career, professor_career_education)
		values(#{professor_carrer_no}, #{professor_id}, #{professor_career_company_name},
			   #{professor_career_mainjob}, #{professor_career_position}, #{professor_career_date},
			   #{professor_career}, #{professor_career_education} )
	</update>
	<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(공통 필수 사항)
		파라미터	: MemberVO
		리턴타입	: -
	-->
	<update id="updateMember" parameterType="member">
		update member set
		member_pwd =${member_pwd},
		member_post =${member_post},
		member_address1 =${member_address1},
		member_address2 =${member_address2},
		member_email =${member_email},
		member_phone =${member_phone},
		member_birth =${member_birth},
		member_picture =${member_picture}
		where member_id=#{member_id}
	</update>
	<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(수강생 필수 사항)
		파라미터	: StudentVO
		리턴타입	: -
	-->
	<update id="updateStudent" parameterType="student">
		update student set
		(student_hope_business =#{student_hope_business},
		student_experience =#{student_experience},
		student_business_purpose =#{student_business_purpose},
		student_remark =#{student_remark})
		where student_id =#{student_id}
	</update>
		<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(수강생 선택 사항)
		파라미터	: Student_certificateVO
		리턴타입	: -
	-->
	<update id="updateStudentCertificate" parameterType="student_certifcicate">
		update student_certificate set
		student_certificate_kinds =#{student_certificate_kinds},
		student_certificate_rank =#{student_certificate_rank},
		student_certificate_date =#{student_certificate_date},
		student_certificate_agency =#{student_certificate_agency}
		where student_certificate_no=#{student_certificate_no}
	</update>
	<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(교수 필수 사항)
		파라미터	: ProfessorVO
		리턴타입	: -
	-->
	<update id="updateProfessor" parameterType="com.dlms.dto.ProfessorVO">
		update professor set
		professor_hope_subject =#{professor_hope_subject},
		professor_subject =#{professor_subject},
		professor_remark =#{professor_remark}
		where student_certificate_no =#{student_certificate_no}
	</update>
	<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(교수 선택 사항)
		파라미터	: Professor_careerVO
		리턴타입	: -
	-->
	<update id="updateProfessor_career" parameterType="com.dlms.dto.Professor_careerVO">
		update professor_career set
		professor_career_company_name =#{professor_career_company_name},
		professor_career_mainjob =#{professor_career_mainjob},
		professor_career_position =#{professor_career_position},
		professor_career_date =#{professor_career_date},
		professor_career =#{professor_career},
		professor_career_education =#{professor_career_education}
		where professor_carrer_no =#{professor_carrer_no};
	</update>
	<!--
		기능구분	: 수정
		기능설명	: 회원정보 수정할 때 사용(회원별 가입 상태 또는 재직 상태 변경)
		파라미터	: MemberVO
		리턴타입	: -
	-->
	<update id="statusUpdateMember" parameterType="member">
		update member set 
		member_status = #{member_status}
		where member_id = #{member_id}
	</update>
	
	
	
	<!--
		기능구분	: 조회
		기능설명	: 교수의 전체 정보 가져오기
		파라미터	: -
		리턴타입	: ProfessorAllVO
	-->
	<select id="selectProfessorList" resultType="com.dlms.dto.ProfessorAllVO">
		select *
		from member, professor
		where member_id = professor_id
	</select>
	
	<!--
		기능구분	: 조회
		기능설명	: 수강생의 전체 정보 가져오기
		파라미터	: -
		리턴타입	: StudentAllVO
	-->
	<select id="selectStudentList" resultType="studentAll">
		select *
		from member m, student s, pay p
		and m.member_id = s.student_id
        and s.student_id = p.student_id
	</select>
	
	<!-- 
		기능구분	: 조회
		기능설명	: 현재 출석일 수 
		파라미터	: -
		리턴타입	: Lecture_attendVO
	 -->
	<select id="selectStudent_lecture_attend_daycount" resultType="int" parameterType="int">
		select count(lecture_attend_status)
		from lecture_attend 
        where lecture_attend_status = '출석'
        and lecture_no = #{int}		
	</select>
	
	<!-- 
		기능구분	: 조회
		기능설명	: 총 출석일 수
		파라미터	: -
		리턴타입	: Lecture_attendVO
	 -->
	<select id="selectStudent_lecture_attend_alldaycount" resultType="int" parameterType="int">
		select count(lecture_attend_status)
		from lecture_attend 	
		where lecture = #{int}
	</select>
	
	
	
	<!--
	기능구분	: 검색
	기능설명	: 검색 구분
	파라미터	: -
	리턴타입	: -
	-->	
	<sql id="search">
		<if test="searchType == 'c'.toString()">
			and class_name like '%'||#{keyword}||'%'			
		</if>
		<if test="searchType == 'n'.toString()">
			and member_name like '%'||#{keyword}||'%'			
		</if>
	</sql>
	
	<!--
		기능구분	: 검색후 리스트
		기능설명	: 수강생 검색 리스트
		파라미터	: student		
	-->			
	<select id="selectSearchStudentAll" resultType="studentAll">
		
		select 
		*
		from member m, student s, pay p
		
		where member_id is not null 
        and m.member_id = s.student_id
        and s.student_id = p.student_id			  	
		<include refid="search" />
		order by member_id desc
	</select>
	<!--
      기능구분   : 조회
      기능설명   : 특정 수강생의 전체 정보를 가져오기
      파라미터   : id
      리턴타입   : StudentAllVO
   -->
   <select id= "selectStudentAllById" resultType="studentAll" parameterType="str">
      select *
      from member, student
      where student_id = member_id
      and student_id=#{str}
   </select>
   
   
   <!--
      기능구분   : 조회
      기능설명   : 특정 교수의 전체 정보를 가져오기
      파라미터   : id
      리턴타입   : ProfessorAllVO
   -->
   <select id= "selectProfessorAllById" resultType="professorAll" parameterType="str">
      select *
      from member, professor
      where professor_id = member_id
      and professor_id=#{str}
   </select>
   <!--
      기능구분   : 조회
      기능설명   : 이름과 이메일을 가지고 일치하는 정보를 가져온다.
      파라미터   : member(member_name, member_email) 
      리턴타입   : MemberVO
   -->
   <select id="selectMemberByNameAndEmail" resultType="member" parameterType="member">
   	select * 
   	from member
   	where member_name = #{member_name}
   	and member_email=#{member_email}
   </select>
	<!--
      기능구분   : 조회
      기능설명   : 이름과 휴대폰번호를 가지고 일치하는 정보를 가져온다.
      파라미터   : member(member_name, member_phone) 
      리턴타입   : MemberVO
   -->
   <select id="selectMemberByNameAndPhone" resultType="member" parameterType="member">
   	select * 
   	from member
   	where member_name = #{member_name}
   	and member_phone=#{member_phone}
   </select>
   	<!--
      기능구분   : 수정
      기능설명   : 아이디를 기준으로 패스워드 변경
      파라미터   : member(member_id, member_pwd) 
      리턴타입   : -
   -->
   <update id="updateMemberPwdByIdAndPwd" parameterType="member">
	   	update member set
	   	member_pwd = #{member_pwd}
	   	where member_id = #{member_id}
   </update>
   <!--
      기능구분   : 수정
      기능설명   : 아이디를 기준으로 해당 비밀번호 틀릴시 비밀번호카운트 추가
      파라미터   : id(회원아이디)
   -->
   <update id="updateLoginPwdWrongCount" parameterType="str">
   		update member set
   		member_pwdcheck= member_pwdcheck+1
   		where member_id= #{member_id}
   </update>
   <!--
      기능구분   : 수정
      기능설명   : 아이디를 기준으로 비밀번호 컬럼 초기화 
      파라미터   : id(회원아이디)
      리턴타입   : -
   -->
   <update id="updatePwdCheckReset" parameterType="str">
   		update member set
   		member_pwdcheck= 0
   		where member_id= #{id}
   </update>
</mapper>