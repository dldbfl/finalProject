package com.dlms.controller.manager.lecture_management;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.expression.spel.ast.Selection;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.dlms.dto.ConsultVO;
import com.dlms.dto.Enterprise_introduceVO;
import com.dlms.dto.LectureVO;
import com.dlms.dto.Lecture_attendVO;
import com.dlms.dto.Lecture_dataVO;
import com.dlms.dto.PayVO;
import com.dlms.dto.ProfessorVO;
import com.dlms.request.ConsultRequest;
import com.dlms.request.LectureDataRequest;
import com.dlms.request.LectureRequest;
import com.dlms.request.ProfessorListReq;
import com.dlms.request.RegistStudentInfoRequest;
import com.dlms.request.SearchCriteria;
import com.dlms.request.payRequest;
import com.dlms.service.founded.FoundedReviewService;
import com.dlms.service.lecture.LectureAttendService;
import com.dlms.service.lecture.LectureReviewService;
import com.dlms.service.lecture.LectureService;
import com.dlms.service.manager.ManagerService;
import com.dlms.service.pay.PayService;

import oracle.net.aso.f;
import sun.invoke.empty.Empty;

/**
 * 
 * @사용목적		:	관리자 강의관리 페이지
 * @작성자		    :	이누리
 * @작성날짜     	:	2020. 6. 17.
 * @마지막수정자	:	이누리
 * @마지막수정일	:	2020. 6. 25.오전 12:15:43
 * @see			    :	-
 *
 */
@Controller
@RequestMapping("/manager/*")
public class Lecture_ManagementController {
	
	@Autowired
	private LectureService lectureService;
	public void setLectureService(LectureService lectureService) {
		this.lectureService = lectureService;
	}
	@Autowired
	private ManagerService managerService;
	public void setManagerService(ManagerService managerService) {
		this.managerService = managerService;
	}
	@Autowired
	private PayService payService;
	public void setPayService(PayService payService) {
		this.payService = payService;
	}
	
	@Autowired
	private LectureAttendService lectureAttendService;
	public void setLectureAttendService(LectureAttendService lectureAttendService) {
		this.lectureAttendService = lectureAttendService;
	}
	
	@Autowired
	private LectureReviewService lectureReviewService;
	public void setLectureReviewService(LectureReviewService lectureReviewService) {
		this.lectureReviewService = lectureReviewService;
	}
	
	@Autowired
	private FoundedReviewService foundedReviewService;
    public void setFoundedReviewService(FoundedReviewService foundedReviewService) {
		this.foundedReviewService = foundedReviewService;
	}
	/**
	 * 
	 * @기능설명		:	강의관리 - 관리자
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 25.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 25.오후 6:13:04
	 * @see			    :	-
	 * @param mnv
	 * @param cri
	 * @return
	 * @throws Exception
	 *
	 */
	@RequestMapping(value="lecture_management", method=RequestMethod.GET, produces="text/plain;charset=utf-8") //@GetMapping("list") 또는 @PostMapping("...") : spring 4.3부터 사용가능, value=RequestMethod 대신 사용가능
	public ModelAndView admin(ModelAndView mnv, SearchCriteria cri) throws Exception {
		
		String url = "manager/lecture_management/lecture_management.page";	
		List<LectureVO> lectureList =  lectureService.getLectureListAdmin();
		if(lectureList.isEmpty()) {
			//통과
			mnv.addObject("nextLecture_no",1);	
		}
		else{
			//다음순번 불러오는 용도
			int nextLecture_no = lectureList.get(0).getLecture_no()+1;
			mnv.addObject("nextLecture_no",nextLecture_no);	
		}
		//빈 강의 집어넣는 용도
		LectureVO lecture = new LectureVO();
		
		//실제 출력용 강의리스트
		Map<String, Object>dataMap=lectureService.getLectureListAdmin(cri);
		//교수리스트 불러오는 용도
		List<ProfessorListReq> professorList =  managerService.getProfessorList();
		
		
		for(int i = 0; i < lectureList.size(); i++) {
			String checkid = lectureList.get(i).getProfessor_id();
			for(int j = 0; j < professorList.size(); j++) {
				if(professorList.get(j).getProfessor_id().equals(checkid)) {
					professorList.remove(j);
				}
			}
			System.out.println(professorList.get(i));
		}
		
		mnv.addObject("professorList", professorList);
		mnv.addObject("lecture",lecture);
		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);
		return mnv;
	}
	
	/**
	 * 
	 * @기능설명		:	강의 상세
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 25.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 25.오후 6:13:23
	 * @see			    :	-
	 * @param lecture_no
	 * @return
	 *
	 */
	@RequestMapping("lecture_management_detail")
	public ResponseEntity<LectureVO> cheerList(int lecture_no){
		ResponseEntity<LectureVO> entity=null;
		LectureVO lecture = new LectureVO();
		
		try {
			lecture=lectureService.getLectureDetail(lecture_no);
			entity= new ResponseEntity<LectureVO>(lecture,HttpStatus.OK);
		} catch (SQLException e) {
			entity= new ResponseEntity<LectureVO>(HttpStatus.BAD_REQUEST);
			e.printStackTrace();
		}
		
		return entity;
	}
	/**
	 * 
	 * @기능설명		:	강의 수정
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 25.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 25.오후 9:07:55
	 * @see			    :	-
	 * @param lecture_no
	 * @return
	 *
	 */
	@RequestMapping("lecture_management_modify")
	public ResponseEntity<LectureRequest> lectureupdate(LectureRequest lecReq, HttpServletRequest request)throws Exception{
		ResponseEntity<LectureRequest> entity=null;
		//원본
		LectureVO lecture_before = lectureService.getLectureDetail(lecReq.getLecture_no());
		//바꾸려고하는 것
		LectureVO lecture_after = lecReq.toLectureVO();
		try {
				String uplaodProFileName = savelecture_image(lecReq,request);
				
				if(uplaodProFileName != null) {
					lecture_after.setLecture_img(uplaodProFileName);
				}
				
				
				if(lecture_before.getProfessor_id().equals(lecture_after.getProfessor_id())) {
					//이제 수정한다.
					lectureService.modifyLecture(lecture_after);
				}else {	
					
					if(lectureReviewService.getDetailById(lecture_before.getManager_id()) != null || !foundedReviewService.myfounded_reviewList(lecture_before.getManager_id()).isEmpty())  {
						
						entity= new ResponseEntity<LectureRequest>(HttpStatus.BAD_REQUEST);
						
					}else {
						//원본에 저장된 파일 데이터를 리스트로 만들어 보존한다.
						List<LectureDataRequest> lecture_data = lectureService.getLectureDataList(lecture_before.getProfessor_id());
						if(!lecture_data.isEmpty()) {
							//원본 데이터를 지운다.
							lectureService.removeLectureData(lecture_data.get(0).getLecture_no());
						}
						
						//원본에 저장된 출석부 데이터를 리스트로 만들어 보존한다.
						List<Lecture_attendVO> lec_attend_data = lectureAttendService.selectAttend_professor_id(lecture_before.getProfessor_id());
						if(!lec_attend_data.isEmpty()) {
							//원본 데이터를 지운다.
							lectureAttendService.deleteAttend(lecture_before.getProfessor_id());;
						}
						//원본에 저장된 결제 데이터를 리스트로 만들어 보존한다.
						List<payRequest> pay_data = payService.selectProfessorPayList(lecture_before.getProfessor_id());
						if(!pay_data.isEmpty()) {
							//원본 데이터를 지운다.
							payService.deletePay(lecture_before.getProfessor_id());;
						}
						
						
						/*List<Lecture_attendVO> lecture_attend = LectureAttendService.*/
						//이제 수정한다.
						lectureService.modifyLecture(lecture_after);
						
						
						//원본에 저장된 데이터를 다른 교수 이름으로 재 삽입한다.
						
						if(!lecture_data.isEmpty()) {
							for(int i = 0; i < lecture_data.size();i++) {					
								LectureDataRequest lecDataReq = lecture_data.get(i);					
								lecDataReq.setProfessor_id(lecture_after.getProfessor_id());
								System.out.println("lec : "+lecDataReq.toString());
								lectureService.writeLectureData(lecDataReq);
							}				
						}
						if(!lec_attend_data.isEmpty()) {
							for(int i = 0; i < lec_attend_data.size();i++) {					
								Lecture_attendVO lec_attend_Req = lec_attend_data.get(i);					
								lec_attend_Req.setProfessor_id(lecture_after.getProfessor_id());
								System.out.println("lec : "+lec_attend_Req.toString());
								lectureAttendService.insertAttend(lec_attend_Req);
							}
						}					
						if(!pay_data.isEmpty()) {
							for(int i = 0; i < pay_data.size();i++) {					
								payRequest payReq = pay_data.get(i);					
								payReq.setProfessor_id(lecture_after.getProfessor_id());
								payReq.setClass_name(pay_data.get(i).getLecture_title()); 
								System.out.println("lec : "+payReq.toString());
								
								payService.insertPay(payReq);
							}
						}						
					}
				}
				
				entity= new ResponseEntity<LectureRequest>(HttpStatus.OK);
				
			} catch (SQLException e) {
				
				entity= new ResponseEntity<LectureRequest>(HttpStatus.BAD_REQUEST);
				e.printStackTrace();
				
			}
		
		return entity;
	}
	
	/**
	 * 
	 * @기능설명		:	강의 삭제
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 26.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 26.오후 2:38:50
	 * @see			    :	-
	 * @param lecture_no
	 * @return
	 * @throws Exception
	 *
	 */
	@RequestMapping("lecture_management_delete")
	public ResponseEntity<Integer> lecturedelete(int lecture_no)throws Exception{
		ResponseEntity<Integer> entity=null;
		
		try {			
			lectureService.removeLecture(lecture_no);
			entity= new ResponseEntity<Integer>(HttpStatus.OK);
		} catch (SQLException e) {
			entity= new ResponseEntity<Integer>(HttpStatus.BAD_REQUEST);
		}
		
		return entity;
	}
	
	/**
	 * 
	 * @기능설명		:	강의등록
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 25.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 25.오후 6:13:55
	 * @see			    :	-
	 * @param lecReq
	 * @param response
	 * @param request
	 * @throws Exception
	 *
	 */
	@RequestMapping(value="lecture_management", method=RequestMethod.POST, produces="text/plain;charset=utf-8")
	public void regist( LectureRequest lecReq, HttpServletResponse response, HttpServletRequest request) throws Exception {
		
		String uplaodProFileName = savelecture_image(lecReq,request);
		
		LectureVO lecture = lecReq.toLectureVO();
		lecture.setLecture_img(uplaodProFileName);
		
		lectureService.writeLecture(lecture);
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		out.println("<script>");
		out.println("alert('강의가 등록되었습니다..');");
		out.println("location.href='lecture_management'");
		out.println("</script>");
		
	}
	
	
	/**
	 * 강의 이미지 저장 경로
	 */
	@Resource(name="lecture_Path")
	private String lecture_Path;
	
	
	/**
	 * 
	 * @기능설명		:	이미지 저장
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 25.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 25.오후 6:19:03
	 * @see			    :	-
	 * @param lecReq
	 * @param request
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 * @throws SQLException 
	 *
	 */
	public String savelecture_image(LectureRequest lecReq, HttpServletRequest request) throws IllegalStateException, IOException, SQLException {
		
		MultipartFile file=lecReq.getPicture();
		String filename = "";
		String checkname = "";
		//등록이 아니면
		if(lectureService.getLectureDetail(lecReq.getLecture_no()) != null) {
			
			filename = lectureService.getLectureDetail(lecReq.getLecture_no()).getLecture_img();
			
			checkname = filename.substring(filename.lastIndexOf('$') + 1);
		}else {
		//등록이면
			System.out.println("성공적으로 등록되었습니다.");
		}
		//비교해서 수정 혹은 등록
		if(!file.getOriginalFilename().isEmpty() && !checkname.equals(file.getOriginalFilename())) {
			filename = UUID.randomUUID().toString().replace("-", "") + "$$"
					+ file.getOriginalFilename();
			
			File savePath = new File(lecture_Path,filename);
			if(!savePath.exists()) {
				savePath.mkdirs();
			}
			
			file.transferTo(savePath);
		}
		
		return filename;
	}
	
	/**
	 * 
	 * @기능설명		:	이미지 브라우저에서 불러오기 ( 상세보기 시 ) 
	 * @작성자		    :	이누리
	 * @작성날짜    	:	2020. 6. 26.
	 * @마지막수정자	:	이누리
	 * @마지막수정일	:	2020. 6. 26.오후 12:41:55
	 * @see			    :	-
	 * @param lecture_img
	 * @param response
	 * @return
	 * @throws Exception
	 *
	 */
	@RequestMapping("/picture/{lecture_img}")
	@ResponseBody
	public ResponseEntity<byte[]> sendPicture(@PathVariable("lecture_img") String lecture_img, HttpServletResponse response)
			throws Exception {

		ResponseEntity<byte[]> entity = null;
		
		String fileName = lecture_img;
		String savePath = lecture_Path + File.separator + fileName +".jpg";

		FileInputStream in = null;
		try {
			//in = new FileInputStream(savePath + File.separator + fileName);
			in = new FileInputStream(savePath);
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), HttpStatus.OK);
		} catch (IOException e) {
			entity = new ResponseEntity<byte[]>(HttpStatus.NOT_FOUND);
		} finally {
			if(in!=null)in.close();
		}

		return entity;
	}
	
	
	
	
}
